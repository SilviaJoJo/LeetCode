The core idea of dynamic programming is to break down large and complex problems in small ones.
Some approaches are given in the reversed order of recommendation:
1. recursion: the most intuitive ones
    time complexity is terrible! -> as a result, recursion is almost never used in dynamic programming
2. recursion with caching/ memoization
3. array: desirable time complexity, mostly O(n)
    dp[n]
    to make it convenient to use values, we should think about the order of storing values:
        top to bottom?
        bottom to top?
        -- this affects how we do our loop!
    sometimes we need 2D array dp[][], just like we do double traversal
        in this case time complexity is O(mn) -- quadratic
4. variables: desirable space complexity
    instead of keep track of the whole array (which is O(n) space)
    we should be clever about simplifying them into a few variables (O(1) space)
Mentioned above, there are mainly two directions of solving this kind of problems, regardless of tricks:
1. top-down: large problems are broken down to smaller ones
    7 - 6 - 5 - ...
2. bottom-up: from scratch, do all possible attempts, which lead to different base cases
    0 - 1 - 2 - ...